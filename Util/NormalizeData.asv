function [normalizeTrain,normalizeTest] = NormalizeData(Model, train, test, type)

    if strcmp(type,'samples')
        % train
        low = min(train');
        high = max(train');
        [row,col] = size(train);
        lowMatrix = repmat(low',1,col);
        highMatrix = repmat(high',1,col);
        normalizeTrain = (train-lowMatrix)./(highMatrix-lowMatrix);
        %test
        low = min(test');
        high = max(test');
        [row,col] = size(test);
        lowMatrix = repmat(low',1,col);
        highMatrix = repmat(high',1,col);
        normalizeTest = (test-lowMatrix)./(highMatrix-lowMatrix);
    elseif strcmp(type,'attributes')
        low = min([train; test]);
        high = max([train; test]);
        % train
        [row,col] = size(train);
        lowMatrix = repmat(low,row,1);
        highMatrix = repmat(high,row,1);
        normalizeTrain = (train-lowMatrix)./(highMatrix-lowMatrix);
        % test
        [row,col] = size(test);
        lowMatrix = repmat(low,row,1);
        highMatrix = repmat(high,row,1);
        normalizeTest = (test-lowMatrix)./(highMatrix-lowMatrix);
    elseif strcmp(type,'attributes_max')
        high = max([train; test]);
        % train
        [row,col] = size(train);
        highMatrix = repmat(high,row,1);
        normalizeTrain = train./highMatrix;
        % test
        [row,col] = size(test);
        highMatrix = repmat(high,row,1);
        normalizeTest = test./highMatrix;
    elseif strcmp(type,'attributes_standard_deviation')
        meanData = mean([train; test]);
        stdData = std([train; test]);
        % train
        [row,col] = size(train);
        meanMatrix = repmat(meanData,row,1);
        stdMatrix = repmat(stdData,row,1);
        normalizeTrain = (train-meanMatrix)./stdMatrix;
        % test
        [row,col] = size(test);
        meanMatrix = repmat(meanData,row,1);
        stdMatrix = repmat(stdData,row,1);
        normalizeTest = (test-meanMatrix)./stdMatrix;
   elseif strcmp(type,'attributes_filter')        
        [normalizeTrain, normalizeTest] = filterDataSigma(Model, train, test); 
        [normalizeTrain, normalizeTest] = NormalizeData(Model, normalizeTrain, normalizeTest, 'attributes');
    elseif strcmp(type,'attributes_pos_filter')    
        [normalizeTrain, normalizeTest] = NormalizeData(Model, train, test, 'attributes');
        [normalizeTrain, normalizeTest] = filterDataSigma(Model, normalizeTrain, normalizeTest);     
    elseif strcmp(type,'attributes_samples_filter')    
        [normalizeTrain, normalizeTest] = NormalizeData(Model, train, test, 'attributes');
        trainc = normalizeTrain;
        testc = normalizeTest;
        trainc(trainc == 0) = NaN;
        testc(testc == 0) = NaN;
        trainValueMean = nanmean(trainc());
        testValueMean = nanmean(testc());
        [row, col] = size(train);
        for i = 1:row
            trainc(i,:) = (normalizeTrain(i,:) < trainValueMean(i)); 
        end;
        for i = 1:row
            for j = 1:col
                if trainc(i,j) == 1
                    train(i,j) = 0; 
                end;
            end;
        end;        
        [row, col] = size(test);
        for i = 1:row
            trainc(i,:) = (normalizeTest(i,:) < testValueMean(i)); 
        end;
        for i = 1:row
            for j = 1:col
                if testc(i,j) == 1
                    test(i,j) = 0; 
                end;
            end;
        end;
        [normalizeTrain, normalizeTest] = NormalizeData(Model, train, test, 'attributes');
    elseif strcmp(type,'attributes_norm_percentual_samples_filter')    
        [normalizeTrain, normalizeTest] = NormalizeData(Model, train, test, 'attributes');
        [row, col] = size(normalizeTrain);
        valueMax = max(normalizeTrain);
        for i = 1:row
            
        end;
        [normalizeTrain, normalizeTest] = filterDataSigma(Model, normalizeTrain, normalizeTest);
    elseif strcmp(type,'attributes_norm_percentual_atributes_filter')    %TODO
        [normalizeTrain, normalizeTest] = NormalizeData(Model, train, test, 'attributes');
        [normalizeTrain, normalizeTest] = filterDataSigma(Model, normalizeTrain, normalizeTest);      
    elseif strcmp(type,'exp')
        [normalizeTrain, normalizeTest] = NormalizeData(train, test, 'attributes');
        normalizeTrain = normalizeTrain.^2;
        normalizeTest = normalizeTest.^2;        
    elseif strcmp(type,'no')
        normalizeTrain = train;
        normalizeTest = test;
    end;

end